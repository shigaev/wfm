(()=>{"use strict";class t{constructor(t){this.$el=document.getElementById(t),this.init()}init(){}onShow(){}onHide(){}hide(){this.$el.classList.add("hide"),this.onHide()}show(){this.$el.classList.remove("hide"),this.onShow()}}function e(){localStorage.setItem("visited",JSON.stringify(!0)),this.hide()}function s(t){if(t.preventDefault(),t.target.classList.contains("tab")){Array.from(this.$el.querySelectorAll(".tab")).forEach((t=>{t.classList.remove("active")})),t.target.classList.add("active");const e=this.tabs.find((e=>e.name===t.target.dataset.name));this.tabs.forEach((t=>t.component.hide())),e.component.show()}}class n{constructor(t,e){this.form=t,this.controls=e}value(){const t={};return Object.keys(this.controls).forEach((e=>{t[e]=this.form[e].value})),t}clear(){Object.keys(this.controls).forEach((t=>{this.form[t].value=""}))}isValid(){let t=!0;return Object.keys(this.controls).forEach((e=>{const s=this.controls[e];let n=!0;s.forEach((t=>{n=t(this.form[e].value)&&n})),n?i(this.form[e]):function(t){i(t);t.classList.add("invalid"),t.insertAdjacentHTML("afterend",'<p class="validation-error">Введите корректные значения</p>')}(this.form[e]),t=t&&n})),t}}function i(t){t.classList.remove("invalid"),t.nextSibling&&t.closest(".form-control").removeChild(t.nextSibling)}class a{static required(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return t&&t.trim()}static minLength(t){return e=>e&&e.length>=t}}async function o(t){const e=await fetch(t);return await e.json()}const r=new class{constructor(t){this.url=t}async createPost(t){try{return o(new Request(this.url+"/posts.json",{method:"post",body:JSON.stringify(t)}))}catch(t){console.error(t)}}async fetchPosts(){try{return o(new Request(`${this.url}/posts.json`,{method:"get"}))}catch(t){console.error(t)}}async fetchPostById(t){try{return o(new Request(`${this.url}/posts/${t}.json`,{method:"get"}))}catch(t){console.error(t)}}}("https://wfm-js-33a5a-default-rtdb.firebaseio.com");async function l(t){if(t.preventDefault(),this.form.isValid()){const t={type:this.$el.type.value,date:(new Date).toLocaleDateString(),...this.form.value()};await r.createPost(t),this.form.clear(),alert("Запись успешно создана")}}function c(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const s="news"===t.type?'<li class="tag tag-blue tag-rounded">Новость</li>':'<li class="tag tag-rounded">Заметка</li>',n=(JSON.parse(localStorage.getItem("favorites"))||[]).includes(t.id)?`\n        <button class="button-round button-small button-danger" data-id="${t.id}">\n            Удалить\n        </button>`:`\n        <button class="button-round button-small button-primary" data-id="${t.id}">\n            Сохранть\n        </button>`;return`\n        <div class="panel">\n            <div class="panel-head">\n                <p class="panel-title">${t.title}</p>\n                <ul class="tags">\n                    ${s}       \n                </ul>\n            </div>\n            <div class="panel-body">\n                <p class="multi-line">${t.fulltext}</p>\n            </div>\n            <div class="panel-footer w-panel-footer">\n                <small>${t.date}</small>\n                ${e.withButton?n:""}\n            </div>\n        </div>\n    `}async function d(t){if(t.preventDefault(),t.target.classList.contains("js-link")){const e=t.target.textContent;this.$el.innerHTML="",this.loader.show();const s=await r.fetchPostById(e);this.loader.hide(),this.$el.insertAdjacentHTML("afterbegin",c(s,{withButton:!1}))}}class h{static fbObjectToArray(t){return Object.keys(t).map((e=>{const s=t[e];return s.id=e,s}))}}function u(t){const e=t.target,s=e.dataset.id;if(s){let t=JSON.parse(localStorage.getItem("favorites"))||[];t.includes(s)?(e.textContent="Сохранить",e.classList.add("button-primary"),e.classList.remove("button-danger"),t=t.filter((t=>t!==s))):(e.classList.remove("button-primary"),e.classList.add("button-danger"),e.textContent="Удалить",t.push(s)),localStorage.setItem("favorites",JSON.stringify(t))}}new class extends t{constructor(t){super(t)}init(){localStorage.getItem("visited")&&this.hide(),this.$el.querySelector(".js-header-start").addEventListener("click",e.bind(this))}}("header");const f=new class extends t{constructor(t){super(t),this.tabs=[]}init(){this.$el.addEventListener("click",s.bind(this))}registerTabs(t){this.tabs=t}}("navigation"),m=new class extends t{constructor(t){super(t)}}("loader"),p=new class extends t{constructor(t){super(t)}init(){this.$el.addEventListener("submit",l.bind(this)),this.form=new n(this.$el,{title:[a.required],fulltext:[a.required,a.minLength(10)]})}}("create"),g=new class extends t{constructor(t,e){let{loader:s}=e;super(t),this.loader=s}init(){this.$el.addEventListener("click",u.bind(this))}async onShow(){this.loader.show();const t=await r.fetchPosts(),e=h.fbObjectToArray(t).map((t=>c(t,{withButton:!0})));this.loader.hide(),this.$el.insertAdjacentHTML("afterbegin",e.join(" "))}onHide(){this.$el.innerHTML=""}}("posts",{loader:m}),b=new class extends t{constructor(t,e){let{loader:s}=e;super(t),this.loader=s}init(){this.$el.addEventListener("click",d.bind(this))}onShow(){const t=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return t.length?`\n        <ul>\n            ${t.map((t=>`<li><a href="#" class="js-link">${t}</a></li>`)).join(" ")}\n        </ul>\n        `:"<p class='center'>Вы пока ничего не добавили</p>"}(JSON.parse(localStorage.getItem("favorites")));this.$el.insertAdjacentHTML("afterbegin",t)}onHide(){this.$el.innerHTML=""}}("favorite",{loader:m});f.registerTabs([{name:"create",component:p},{name:"posts",component:g},{name:"favorite",component:b}])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cmUvY29tcG9uZW50LmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLm5ldy5sZWFybmluZy8uL3NyYy9jb21wb25lbnRzL25hdmlnYXRpb24uY29tcG9uZW50LmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL2NvcmUvZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLm5ldy5sZWFybmluZy8uL3NyYy9jb3JlL3ZhbGlkYXRvcnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay5uZXcubGVhcm5pbmcvLi9zcmMvc2VydmljZXMvYXBpLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay5uZXcubGVhcm5pbmcvLi9zcmMvY29tcG9uZW50cy9jcmVhdGUuY29tcG9uZW50LmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL3RlbXBsYXRlcy9wb3N0LnRlbXBsYXRlLmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL2NvbXBvbmVudHMvZmF2b3JpdGUuY29tcG9uZW50LmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL3NlcnZpY2VzL3RyYW5zZm9ybS5zZXJ2aWNlLmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL2NvbXBvbmVudHMvcG9zdHMuY29tcG9uZW50LmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2submV3LmxlYXJuaW5nLy4vc3JjL2NvbXBvbmVudHMvbG9hZGVyLmNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgdGhpcy4kZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHt9XHJcblxyXG4gICAgb25TaG93KCkge31cclxuXHJcbiAgICBvbkhpZGUoKSB7fVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy4kZWwuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xyXG4gICAgICAgIHRoaXMub25IaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLiRlbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcbiAgICAgICAgdGhpcy5vblNob3coKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL2NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgSGVhZGVyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgc3VwZXIoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd2aXNpdGVkJykpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJ0biA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1oZWFkZXItc3RhcnQnKTtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBidXR0b25IYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBidXR0b25IYW5kbGVyKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Zpc2l0ZWQnLCBKU09OLnN0cmluZ2lmeSh0cnVlKSk7XHJcbiAgICB0aGlzLmhpZGUoKTtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL2NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCkge1xyXG4gICAgICAgIHN1cGVyKGlkKTtcclxuXHJcbiAgICAgICAgdGhpcy50YWJzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRhYkNsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3RlclRhYnModGFicykge1xyXG4gICAgICAgIHRoaXMudGFicyA9IHRhYnM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRhYkNsaWNrSGFuZGxlcihldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWInKSkge1xyXG4gICAgICAgIEFycmF5LmZyb20odGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgnLnRhYicpKS5mb3JFYWNoKCh0YWIpID0+IHtcclxuICAgICAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWN0aXZlVGFiID0gdGhpcy50YWJzLmZpbmQoXHJcbiAgICAgICAgICAgICh0KSA9PiB0Lm5hbWUgPT09IGV2ZW50LnRhcmdldC5kYXRhc2V0Lm5hbWUsXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnRhYnMuZm9yRWFjaCgodCkgPT4gdC5jb21wb25lbnQuaGlkZSgpKTtcclxuICAgICAgICBhY3RpdmVUYWIuY29tcG9uZW50LnNob3coKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRm9ybSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihmb3JtLCBjb250cm9scykge1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IGZvcm07XHJcbiAgICAgICAgdGhpcy5jb250cm9scyA9IGNvbnRyb2xzO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5jb250cm9scykuZm9yRWFjaCgoY29udHJvbCkgPT4ge1xyXG4gICAgICAgICAgICB2YWx1ZVtjb250cm9sXSA9IHRoaXMuZm9ybVtjb250cm9sXS52YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5jb250cm9scykuZm9yRWFjaCgoY29udHJvbCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1bY29udHJvbF0udmFsdWUgPSAnJztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpc1ZhbGlkKCkge1xyXG4gICAgICAgIGxldCBpc0Zvcm1WYWxpZCA9IHRydWU7XHJcblxyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuY29udHJvbHMpLmZvckVhY2goKGNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmFsaWRhdG9ycyA9IHRoaXMuY29udHJvbHNbY29udHJvbF07XHJcblxyXG4gICAgICAgICAgICBsZXQgaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcnMuZm9yRWFjaCgodmFsaWRhdG9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsaWRhdG9yKHRoaXMuZm9ybVtjb250cm9sXS52YWx1ZSkgJiYgaXNWYWxpZDtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpc1ZhbGlkXHJcbiAgICAgICAgICAgICAgICA/IGNsZWFyRXJyb3IodGhpcy5mb3JtW2NvbnRyb2xdKVxyXG4gICAgICAgICAgICAgICAgOiBzZXRFcnJvcih0aGlzLmZvcm1bY29udHJvbF0pO1xyXG4gICAgICAgICAgICBpc0Zvcm1WYWxpZCA9IGlzRm9ybVZhbGlkICYmIGlzVmFsaWQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBpc0Zvcm1WYWxpZDtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0RXJyb3IoJGNvbnRyb2wpIHtcclxuICAgIGNsZWFyRXJyb3IoJGNvbnRyb2wpO1xyXG4gICAgY29uc3QgZXJyb3IgPSAnPHAgY2xhc3M9XCJ2YWxpZGF0aW9uLWVycm9yXCI+0JLQstC10LTQuNGC0LUg0LrQvtGA0YDQtdC60YLQvdGL0LUg0LfQvdCw0YfQtdC90LjRjzwvcD4nO1xyXG4gICAgJGNvbnRyb2wuY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xyXG4gICAgJGNvbnRyb2wuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGVycm9yKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJFcnJvcigkY29udHJvbCkge1xyXG4gICAgJGNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZCcpO1xyXG5cclxuICAgIGlmICgkY29udHJvbC5uZXh0U2libGluZykge1xyXG4gICAgICAgICRjb250cm9sLmNsb3Nlc3QoJy5mb3JtLWNvbnRyb2wnKS5yZW1vdmVDaGlsZCgkY29udHJvbC5uZXh0U2libGluZyk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFZhbGlkYXRvcnMge1xyXG4gICAgc3RhdGljIHJlcXVpcmVkKHZhbHVlID0gJycpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUudHJpbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBtaW5MZW5ndGgobGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoID49IGxlbmd0aDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiIsImNsYXNzIEFwaVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoYmFzZVVybCkge1xyXG4gICAgICAgIHRoaXMudXJsID0gYmFzZVVybDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjcmVhdGVQb3N0KHBvc3QpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodGhpcy51cmwgKyAnL3Bvc3RzLmpzb24nLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBvc3QpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZVJlcXVlc3QocmVxdWVzdCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZldGNoUG9zdHMoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGAke3RoaXMudXJsfS9wb3N0cy5qc29uYCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VSZXF1ZXN0KHJlcXVlc3QpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmZXRjaFBvc3RCeUlkKGlkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGAke3RoaXMudXJsfS9wb3N0cy8ke2lkfS5qc29uYCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VSZXF1ZXN0KHJlcXVlc3QpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdXNlUmVxdWVzdChyZXF1ZXN0KSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xyXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFwaVNlcnZpY2UgPSBuZXcgQXBpU2VydmljZShcclxuICAgICdodHRwczovL3dmbS1qcy0zM2E1YS1kZWZhdWx0LXJ0ZGIuZmlyZWJhc2Vpby5jb20nLFxyXG4pO1xyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL2NvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tICcuLi9jb3JlL2Zvcm0nO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3JzIH0gZnJvbSAnLi4vY29yZS92YWxpZGF0b3JzJztcclxuaW1wb3J0IHsgYXBpU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FwaS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDcmVhdGVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgICAgICBzdXBlcihpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBzdWJtaXRIYW5kbGVyLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLmZvcm0gPSBuZXcgRm9ybSh0aGlzLiRlbCwge1xyXG4gICAgICAgICAgICB0aXRsZTogW1ZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICAgICAgICBmdWxsdGV4dDogW1ZhbGlkYXRvcnMucmVxdWlyZWQsIFZhbGlkYXRvcnMubWluTGVuZ3RoKDEwKV0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHN1Ym1pdEhhbmRsZXIoZXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgaWYgKHRoaXMuZm9ybS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IHtcclxuICAgICAgICAgICAgdHlwZTogdGhpcy4kZWwudHlwZS52YWx1ZSxcclxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKSxcclxuICAgICAgICAgICAgLi4udGhpcy5mb3JtLnZhbHVlKCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYXdhaXQgYXBpU2VydmljZS5jcmVhdGVQb3N0KGZvcm1EYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5mb3JtLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGFsZXJ0KCfQl9Cw0L/QuNGB0Ywg0YPRgdC/0LXRiNC90L4g0YHQvtC30LTQsNC90LAnKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gcmVuZGVyUG9zdChwb3N0LCBvcHRpb25zID0ge30pIHtcclxuICAgIGNvbnN0IHRhZyA9XHJcbiAgICAgICAgcG9zdC50eXBlID09PSAnbmV3cydcclxuICAgICAgICAgICAgPyBgPGxpIGNsYXNzPVwidGFnIHRhZy1ibHVlIHRhZy1yb3VuZGVkXCI+0J3QvtCy0L7RgdGC0Yw8L2xpPmBcclxuICAgICAgICAgICAgOiBgPGxpIGNsYXNzPVwidGFnIHRhZy1yb3VuZGVkXCI+0JfQsNC80LXRgtC60LA8L2xpPmA7XHJcbiAgICBjb25zdCBidXR0b24gPSAoXHJcbiAgICAgICAgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzJykpIHx8IFtdXHJcbiAgICApLmluY2x1ZGVzKHBvc3QuaWQpXHJcbiAgICAgICAgPyBgXHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbi1yb3VuZCBidXR0b24tc21hbGwgYnV0dG9uLWRhbmdlclwiIGRhdGEtaWQ9XCIke3Bvc3QuaWR9XCI+XHJcbiAgICAgICAgICAgINCj0LTQsNC70LjRgtGMXHJcbiAgICAgICAgPC9idXR0b24+YFxyXG4gICAgICAgIDogYFxyXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidXR0b24tcm91bmQgYnV0dG9uLXNtYWxsIGJ1dHRvbi1wcmltYXJ5XCIgZGF0YS1pZD1cIiR7cG9zdC5pZH1cIj5cclxuICAgICAgICAgICAg0KHQvtGF0YDQsNC90YLRjFxyXG4gICAgICAgIDwvYnV0dG9uPmA7XHJcblxyXG4gICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwicGFuZWxcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhbmVsLWhlYWRcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicGFuZWwtdGl0bGVcIj4ke3Bvc3QudGl0bGV9PC9wPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwidGFnc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7dGFnfSAgICAgICBcclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJtdWx0aS1saW5lXCI+JHtwb3N0LmZ1bGx0ZXh0fTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYW5lbC1mb290ZXIgdy1wYW5lbC1mb290ZXJcIj5cclxuICAgICAgICAgICAgICAgIDxzbWFsbD4ke3Bvc3QuZGF0ZX08L3NtYWxsPlxyXG4gICAgICAgICAgICAgICAgJHtvcHRpb25zLndpdGhCdXR0b24gPyBidXR0b24gOiAnJ31cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgO1xyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvcmUvY29tcG9uZW50JztcclxuaW1wb3J0IHsgYXBpU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgcmVuZGVyUG9zdCB9IGZyb20gJy4uL3RlbXBsYXRlcy9wb3N0LnRlbXBsYXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGYXZvcml0ZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCwgeyBsb2FkZXIgfSkge1xyXG4gICAgICAgIHN1cGVyKGlkKTtcclxuICAgICAgICB0aGlzLmxvYWRlciA9IGxvYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIHRoaXMuJGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbGlua0NsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNob3coKSB7XHJcbiAgICAgICAgY29uc3QgZmF2b3JpdGVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVzJykpO1xyXG4gICAgICAgIGNvbnN0IGh0bWwgPSByZW5kZXJMaXN0KGZhdm9yaXRlcyk7XHJcbiAgICAgICAgdGhpcy4kZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgaHRtbCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25IaWRlKCkge1xyXG4gICAgICAgIHRoaXMuJGVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBsaW5rQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1saW5rJykpIHtcclxuICAgICAgICBjb25zdCBwb3N0SWQgPSBldmVudC50YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy4kZWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgdGhpcy5sb2FkZXIuc2hvdygpO1xyXG4gICAgICAgIGNvbnN0IHBvc3QgPSBhd2FpdCBhcGlTZXJ2aWNlLmZldGNoUG9zdEJ5SWQocG9zdElkKTtcclxuICAgICAgICB0aGlzLmxvYWRlci5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy4kZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKFxyXG4gICAgICAgICAgICAnYWZ0ZXJiZWdpbicsXHJcbiAgICAgICAgICAgIHJlbmRlclBvc3QocG9zdCwgeyB3aXRoQnV0dG9uOiBmYWxzZSB9KSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJMaXN0KGxpc3QgPSBbXSkge1xyXG4gICAgaWYgKGxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICR7bGlzdFxyXG4gICAgICAgICAgICAgICAgLm1hcCgoaSkgPT4gYDxsaT48YSBocmVmPVwiI1wiIGNsYXNzPVwianMtbGlua1wiPiR7aX08L2E+PC9saT5gKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJyAnKX1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGA8cCBjbGFzcz0nY2VudGVyJz7QktGLINC/0L7QutCwINC90LjRh9C10LPQviDQvdC1INC00L7QsdCw0LLQuNC70Lg8L3A+YDtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgVHJhbnNmb3JtU2VydmljZSB7XHJcbiAgICBzdGF0aWMgZmJPYmplY3RUb0FycmF5KGZiRGF0YSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhmYkRhdGEpLm1hcCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBmYkRhdGFba2V5XTtcclxuICAgICAgICAgICAgaXRlbS5pZCA9IGtleTtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29yZS9jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBhcGlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUcmFuc2Zvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdHJhbnNmb3JtLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyByZW5kZXJQb3N0IH0gZnJvbSAnLi4vdGVtcGxhdGVzL3Bvc3QudGVtcGxhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvc3RzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCB7IGxvYWRlciB9KSB7XHJcbiAgICAgICAgc3VwZXIoaWQpO1xyXG4gICAgICAgIHRoaXMubG9hZGVyID0gbG9hZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy4kZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBidXR0b25IYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uU2hvdygpIHtcclxuICAgICAgICB0aGlzLmxvYWRlci5zaG93KCk7XHJcbiAgICAgICAgY29uc3QgZmJEYXRhID0gYXdhaXQgYXBpU2VydmljZS5mZXRjaFBvc3RzKCk7XHJcbiAgICAgICAgY29uc3QgcG9zdHMgPSBUcmFuc2Zvcm1TZXJ2aWNlLmZiT2JqZWN0VG9BcnJheShmYkRhdGEpO1xyXG4gICAgICAgIGNvbnN0IGh0bWwgPSBwb3N0cy5tYXAoKHBvc3QpID0+XHJcbiAgICAgICAgICAgIHJlbmRlclBvc3QocG9zdCwgeyB3aXRoQnV0dG9uOiB0cnVlIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5sb2FkZXIuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMuJGVsLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGh0bWwuam9pbignICcpKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy4kZWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1dHRvbkhhbmRsZXIoZXZlbnQpIHtcclxuICAgIGNvbnN0ICRlbCA9IGV2ZW50LnRhcmdldDtcclxuICAgIGNvbnN0IGlkID0gJGVsLmRhdGFzZXQuaWQ7XHJcblxyXG4gICAgaWYgKGlkKSB7XHJcbiAgICAgICAgbGV0IGZhdm9yaXRlcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Zhdm9yaXRlcycpKSB8fCBbXTtcclxuXHJcbiAgICAgICAgaWYgKGZhdm9yaXRlcy5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgLy8gZGVsZXRlIGVsZW1lbnRcclxuICAgICAgICAgICAgJGVsLnRleHRDb250ZW50ID0gJ9Ch0L7RhdGA0LDQvdC40YLRjCc7XHJcbiAgICAgICAgICAgICRlbC5jbGFzc0xpc3QuYWRkKCdidXR0b24tcHJpbWFyeScpO1xyXG4gICAgICAgICAgICAkZWwuY2xhc3NMaXN0LnJlbW92ZSgnYnV0dG9uLWRhbmdlcicpO1xyXG4gICAgICAgICAgICBmYXZvcml0ZXMgPSBmYXZvcml0ZXMuZmlsdGVyKChmSWQpID0+IGZJZCAhPT0gaWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCBlbGVtZW50XHJcbiAgICAgICAgICAgICRlbC5jbGFzc0xpc3QucmVtb3ZlKCdidXR0b24tcHJpbWFyeScpO1xyXG4gICAgICAgICAgICAkZWwuY2xhc3NMaXN0LmFkZCgnYnV0dG9uLWRhbmdlcicpO1xyXG4gICAgICAgICAgICAkZWwudGV4dENvbnRlbnQgPSAn0KPQtNCw0LvQuNGC0YwnO1xyXG4gICAgICAgICAgICBmYXZvcml0ZXMucHVzaChpZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZmF2b3JpdGVzJywgSlNPTi5zdHJpbmdpZnkoZmF2b3JpdGVzKSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgeyBIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvaGVhZGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbmF2aWdhdGlvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDcmVhdGVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY3JlYXRlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZhdm9yaXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Zhdm9yaXRlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBvc3RzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Bvc3RzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9sb2FkZXIuY29tcG9uZW50JztcclxuXHJcbm5ldyBIZWFkZXJDb21wb25lbnQoJ2hlYWRlcicpO1xyXG5cclxuY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uQ29tcG9uZW50KCduYXZpZ2F0aW9uJyk7XHJcbmNvbnN0IGxvYWRlciA9IG5ldyBMb2FkZXJDb21wb25lbnQoJ2xvYWRlcicpO1xyXG5jb25zdCBjcmVhdGUgPSBuZXcgQ3JlYXRlQ29tcG9uZW50KCdjcmVhdGUnKTtcclxuY29uc3QgcG9zdHMgPSBuZXcgUG9zdHNDb21wb25lbnQoJ3Bvc3RzJywgeyBsb2FkZXIgfSk7XHJcbmNvbnN0IGZhdm9yaXRlID0gbmV3IEZhdm9yaXRlQ29tcG9uZW50KCdmYXZvcml0ZScsIHsgbG9hZGVyIH0pO1xyXG5cclxubmF2aWdhdGlvbi5yZWdpc3RlclRhYnMoW1xyXG4gICAgeyBuYW1lOiAnY3JlYXRlJywgY29tcG9uZW50OiBjcmVhdGUgfSxcclxuICAgIHsgbmFtZTogJ3Bvc3RzJywgY29tcG9uZW50OiBwb3N0cyB9LFxyXG4gICAgeyBuYW1lOiAnZmF2b3JpdGUnLCBjb21wb25lbnQ6IGZhdm9yaXRlIH0sXHJcbl0pO1xyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL2NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZGVyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgc3VwZXIoaWQpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImlkIiwidGhpcyIsIiRlbCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbml0Iiwib25TaG93Iiwib25IaWRlIiwiaGlkZSIsImNsYXNzTGlzdCIsImFkZCIsInNob3ciLCJyZW1vdmUiLCJidXR0b25IYW5kbGVyIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0YWJDbGlja0hhbmRsZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwiY29udGFpbnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInRhYiIsImFjdGl2ZVRhYiIsInRhYnMiLCJmaW5kIiwidCIsIm5hbWUiLCJkYXRhc2V0IiwiY29tcG9uZW50IiwiRm9ybSIsImZvcm0iLCJjb250cm9scyIsInZhbHVlIiwiT2JqZWN0Iiwia2V5cyIsImNvbnRyb2wiLCJjbGVhciIsImlzVmFsaWQiLCJpc0Zvcm1WYWxpZCIsInZhbGlkYXRvcnMiLCJ2YWxpZGF0b3IiLCJjbGVhckVycm9yIiwiJGNvbnRyb2wiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJzZXRFcnJvciIsIm5leHRTaWJsaW5nIiwiY2xvc2VzdCIsInJlbW92ZUNoaWxkIiwiVmFsaWRhdG9ycyIsInJlcXVpcmVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidHJpbSIsIm1pbkxlbmd0aCIsImFzeW5jIiwidXNlUmVxdWVzdCIsInJlcXVlc3QiLCJyZXNwb25zZSIsImZldGNoIiwianNvbiIsImFwaVNlcnZpY2UiLCJiYXNlVXJsIiwidXJsIiwiY3JlYXRlUG9zdCIsInBvc3QiLCJSZXF1ZXN0IiwibWV0aG9kIiwiYm9keSIsImVycm9yIiwiY29uc29sZSIsImZldGNoUG9zdHMiLCJmZXRjaFBvc3RCeUlkIiwic3VibWl0SGFuZGxlciIsImZvcm1EYXRhIiwidHlwZSIsImRhdGUiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiYWxlcnQiLCJyZW5kZXJQb3N0Iiwib3B0aW9ucyIsInRhZyIsImJ1dHRvbiIsInBhcnNlIiwiZ2V0SXRlbSIsImluY2x1ZGVzIiwidGl0bGUiLCJmdWxsdGV4dCIsIndpdGhCdXR0b24iLCJsaW5rQ2xpY2tIYW5kbGVyIiwicG9zdElkIiwidGV4dENvbnRlbnQiLCJpbm5lckhUTUwiLCJsb2FkZXIiLCJUcmFuc2Zvcm1TZXJ2aWNlIiwiZmJPYmplY3RUb0FycmF5IiwiZmJEYXRhIiwibWFwIiwia2V5IiwiaXRlbSIsImZhdm9yaXRlcyIsImZpbHRlciIsImZJZCIsInB1c2giLCJzdXBlciIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZCIsIm5hdmlnYXRpb24iLCJyZWdpc3RlclRhYnMiLCJjcmVhdGUiLCJwb3N0cyIsIl9yZWYiLCJodG1sIiwiam9pbiIsImZhdm9yaXRlIiwibGlzdCIsImkiLCJyZW5kZXJMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==